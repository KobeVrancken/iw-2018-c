%%%%%%%%%% ABOUT THIS DOCUMENT AND DISCLAIMER %%%%%%%%%%
This is _not_ a comprehensive test suite, but rather serves to demonstrate some
edge cases to help you test your solution.

Merely producing the expected output for this file does _not_ guarantee your
project solution is correct. You are strongly advised to write your own
additional test files to thoroughly test your code.

That being said, lets go to the fun part and trigger some preprocessor
functionality!

%%%%%%%%%% LINE COMMENTS %%%%%%%%%%

// a line comment should never be printed
    //even if not followed by an explicit space

Here comes a line comment at the end of a line: // the remainder of that line
    The following line comment //should never be printed

You should also be able to handle	tab characters

%%%%%%%%%% BLOCK COMMENTS %%%%%%%%%%

A block comment can start in the middle of a line /* commented
    block-commented lines should be completely ignored
    until we reach a block comment terminator */ and everthing is printed again

/* You can assume block comment open/terminate symbols are always preceded by space */
/* newline or	*/ tab, but they are
not always /*guaranteed to be */followed by a space.

/* //////////////////////////////
 * * this should not be printed *
 * //////////////////////////////
	*/
and this should be visible again

%%%%%%%%%% WARNING PREPROCESSOR DIRECTIVE %%%%%%%%%%

#warning this entire line should be output as a warning message 
	#warning and another one
  	  	  #warning preprocessor directives may be preceded by arbitrarily many spaces and/or tabs

should always continue printing after omitting a warning

%%%%%%%%%% ERROR PREPROCESSOR DIRECTIVE %%%%%%%%%%

  #error this entire line is an error message and may terminate the preprocessor
	  #warning1234 this is not a correct directive, and should hence trigger an error

if the -e flag was given, the preprocessor should terminate and stop printing after omitting the error
    this may should thus never be printed

%%%%%%%%%% DEFINE PREPROCESSOR DIRECTIVE %%%%%%%%%%

Lets try defining some stuff:
#define MY_KEY              my_value

Note that value strings can be arbitrarily long and contain spaces:
	#define FOO             Lorem ipsum dolor sit amet, consectetur adipiscing elit

Note that keys and values may be separated by arbitrarily many spaces and tabs
 #define ANOTHER_KEY_BAR  	this is the value	for the	bar key

Note that it is also allowed to define keys with empty values
#define EMPTY_KEY
#define ANOTHER_EMPTY_KEY   	    
Occurences of EMPTY_KEY	ANOTHER_EMPTY_KEY should be stripped.

The following word should be replaced with my_value right here: MY_KEY 
And it should also work for the following foo sentence: FOO 
Dont forget replacements may occur in the middle (	ANOTHER_KEY_BAR ) of a sentence

The following define within a block comment should be ignored
/*
    #define NOKEY1  VAL2 */
...but block comment should have ended by now

The following line-commented define should also be ignored
 //#define NOKEY2    VAL2
...Hence, NOKEY1 and NOKEY2 should not be substituted.

Redefining keys with the same value should be fine
#define MY_KEY              my_value
Redefining keys with a new value should produce a warning
#define MY_KEY              another_value

%%%%%%%%%% UNDEF PREPROCESSOR DIRECTIVE %%%%%%%%%%

Undefining a non-existing key should be silently ignored, like this:
  #undef NON_EXISTING_KEY

After undefining an existing key, subsequent occurences should not be replaced anymore:
	#undef FOO
The following word should not be replaced:  FOO

And it should also still work for the following sentence:	ANOTHER_KEY_BAR 
#undef ANOTHER_KEY_BAR
 ...But now not anymore: ANOTHER_KEY_BAR 

Redefining an undefined key should be fine now
#undef MY_KEY            
#define MY_KEY              another_value
This should be properly replaced: MY_KEY 
